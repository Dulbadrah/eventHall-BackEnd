generator client {
  provider = "prisma-client-js"
}

datasource db { 
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- User --------------------
model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role   @default(ADMIN)
  birthDate DateTime
  phoneNumber String
  address String?

  // Эзэмшдэг Venue-үүд
  ownedVenues   Venue[]       @relation("Super_AdminVenues")
  
  // Admin хийж байгаа Venue-үүд
  adminVenues   VenueAdmin[]
  
  bookings  Booking[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------- Venue --------------------
model Venue {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  location    String
  capacity    Int
  price       Float
  rating      Float?     // Computed from Reviews
  amenities   Amenity[]  @relation("VenueAmenities")
  
  images      VenueImage[]
  tags        VenueTag[]

  // Эзэн (Super Admin)
  Super_Admin User @relation("Super_AdminVenues", fields: [Super_AdminId], references: [id])
  Super_AdminId Int

  // Admins (many-to-many through VenueAdmin)
  admins      VenueAdmin[]

  bookings    Booking[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// -------------------- VenueAdmin (junction table) --------------------
model VenueAdmin {
  venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int
  admin   User  @relation(fields: [adminId], references: [id])
  adminId Int
  role    Role  @default(ADMIN)

  @@id([venueId, adminId])
}

// -------------------- Booking --------------------
model Booking {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  venue      Venue         @relation(fields: [venueId], references: [id])
  venueId    Int
  eventDate  DateTime
  guestCount Int
  notes      String?
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

// -------------------- Amenity --------------------
model Amenity {
  id     Int     @id @default(autoincrement())
  name   String
  venues Venue[] @relation("VenueAmenities")
}

// -------------------- Review --------------------
model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  venueId   Int
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
}

// -------------------- VenueImage venue olon zurag oruulwal heregteimshig bain --------------------
model VenueImage {
  id      Int    @id @default(autoincrement())
  url     String
  venue   Venue  @relation(fields: [venueId], references: [id])
  venueId Int
}

// -------------------- Tag-venue d holbogdson medeelel --------------------
model Tag {
  id     Int     @id @default(autoincrement())
  name   String
  venues VenueTag[]
}

// -------------------- VenueTag (junction table) neg tag olon venuete baij bolno --------------------
model VenueTag {
  venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int
  tag     Tag   @relation(fields: [tagId], references: [id])
  tagId   Int

  @@id([venueId, tagId])
}

// -------------------- Enums --------------------
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
